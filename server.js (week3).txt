"use strict";

const express = require("express");
const favicon = require("serve-favicon");
const bodyParser = require("body-parser");
const session = require("express-session");
// const csrf = require('csurf');
const consolidate = require("consolidate"); // Templating library adapter for Express
const swig = require("swig");
const helmet = require("helmet"); // Added: Helmet for securing HTTP headers [TASK 3]
const MongoClient = require("mongodb").MongoClient; // Driver for connecting to MongoDB
const http = require("http");
const marked = require("marked");
const app = express(); // Web framework to handle routing requests
const routes = require("./app/routes");
const { port, db, cookieSecret } = require("./config/config"); // Application config properties

// Added: Winston logging setup [TASK 2]
const winston = require("winston");
const logger = winston.createLogger({
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: "security.log" })
    ]
});
logger.info(" Application started"); // Log server startup

MongoClient.connect(db, (err, db) => {
    if (err) {
        logger.error("❌ DB connection error"); // Winston logging
        console.log("Error: DB: connect");
        console.log(err);
        process.exit(1);
    }
    logger.info("Connected to the database"); //  Winston logging
    console.log(`Connected to the database`);

    // Helmet middleware to secure HTTP headers [TASK 3]
    app.use(helmet());

    // Adding/ remove HTTP Headers for security
    app.use(favicon(__dirname + "/app/assets/favicon.ico"));

    // Express middleware to populate "req.body" so we can access POST variables
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
        // Mandatory in Express v4
        extended: false
    }));

    // Enable session management using express middleware
    app.use(session({
        secret: cookieSecret,
        // Both mandatory in Express v4
        saveUninitialized: true,
        resave: true
    }));

    // Register templating engine
    app.engine(".html", consolidate.swig);
    app.set("view engine", "html");
    app.set("views", `${__dirname}/app/views`);

    // Fix for A5 - Security MisConfig
    // TODO: make sure assets are declared before app.use(session())
    app.use(express.static(`${__dirname}/app/assets`));

    // Initializing marked library
    // Fix for A9 - Insecure Dependencies
    marked.setOptions({
        sanitize: true
    });
    app.locals.marked = marked;

    // Application routes
    routes(app, db);

    // Template system setup
    swig.setDefaults({
        // Autoescape disabled
        autoescape: false
    });

    // Insecure HTTP connection
    http.createServer(app).listen(port, () => {
        logger.info(`🌐 Express server listening on port ${port}`); // Winston logging
        console.log(`Express http server listening on port ${port}`);
    });
});
