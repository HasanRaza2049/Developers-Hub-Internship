const UserDAO = require("../data/user-dao").UserDAO;
const AllocationsDAO = require("../data/allocations-dao").AllocationsDAO;
const { environmentalScripts } = require("../../config/config");

// Added: bcrypt and validator
const bcrypt = require("bcrypt");
const validator = require("validator");

// Added: jsonwebtoken for token-based authentication
const jwt = require("jsonwebtoken");

function SessionHandler(db) {
    "use strict";

    const userDAO = new UserDAO(db);
    const allocationsDAO = new AllocationsDAO(db);

    const prepareUserData = (user, next) => {
        const stocks = Math.floor((Math.random() * 40) + 1);
        const funds = Math.floor((Math.random() * 40) + 1);
        const bonds = 100 - (stocks + funds);

        allocationsDAO.update(user._id, stocks, funds, bonds, (err) => {
            if (err) return next(err);
        });
    };

    this.isAdminUserMiddleware = (req, res, next) => {
        if (req.session.userId) {
            return userDAO.getUserById(req.session.userId, (err, user) => {
               return user && user.isAdmin ? next() : res.redirect("/login");
            });
        }
        console.log("redirecting to login");
        return res.redirect("/login");
    };

    this.isLoggedInMiddleware = (req, res, next) => {
        if (req.session.userId) {
            return next();
        }
        console.log("redirecting to login");
        return res.redirect("/login");
    };

    this.displayLoginPage = (req, res, next) => {
        return res.render("login", {
            userName: "",
            password: "",
            loginError: "",
            environmentalScripts
        });
    };

    // Modified: Login logic to include bcrypt & JWT
    this.handleLoginRequest = (req, res, next) => {
        const { userName, password } = req.body;

        userDAO.getUserByUserName(userName, (err, user) => {
            const invalidUserNameErrorMessage = "Invalid username";
            const invalidPasswordErrorMessage = "Invalid password";

            if (err || !user) {
                return res.render("login", {
                    userName,
                    password: "",
                    loginError: invalidUserNameErrorMessage,
                    environmentalScripts
                });
            }

            bcrypt.compare(password, user.password, (err, isMatch) => {
                if (err || !isMatch) {
                    return res.render("login", {
                        userName,
                        password: "",
                        loginError: invalidPasswordErrorMessage,
                        environmentalScripts
                    });
                }

                req.session.regenerate(() => {
                    req.session.userId = user._id;

                    // Generate JWT Token after successful login
                    const token = jwt.sign(
                        { id: user._id, username: user.userName },
                        'superSecret123!@#JWTkey987', // 🔐 Replace with secure env variable in production
                        { expiresIn: '1h' }
                    );

                    // Send token in cookie (can also send in response if API)
                    res.cookie("auth_token", token, {
                        httpOnly: true,
                        secure: false // Set to true in production with HTTPS
                    });

                    return res.redirect(user.isAdmin ? "/benefits" : "/dashboard");
                });
            });
        });
    };

    this.displayLogoutPage = (req, res) => {
        res.clearCookie("auth_token"); // ✅ Clear token on logout
        req.session.destroy(() => res.redirect("/"));
    };

    this.displaySignupPage = (req, res) => {
        res.render("signup", {
            userName: "",
            password: "",
            passwordError: "",
            email: "",
            userNameError: "",
            emailError: "",
            verifyError: "",
            environmentalScripts
        });
    };

    const validateSignup = (userName, firstName, lastName, password, verify, email, errors) => {
        const USER_RE = /^.{1,20}$/;
        const FNAME_RE = /^.{1,100}$/;
        const LNAME_RE = /^.{1,100}$/;
        const PASS_RE = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;

        errors.userNameError = "";
        errors.firstNameError = "";
        errors.lastNameError = "";
        errors.passwordError = "";
        errors.verifyError = "";
        errors.emailError = "";

        if (!USER_RE.test(userName)) {
            errors.userNameError = "Invalid user name.";
            return false;
        }
        if (!FNAME_RE.test(firstName)) {
            errors.firstNameError = "Invalid first name.";
            return false;
        }
        if (!LNAME_RE.test(lastName)) {
            errors.lastNameError = "Invalid last name.";
            return false;
        }
        if (!PASS_RE.test(password)) {
            errors.passwordError = "Password must be at least 8 characters and include numbers, lowercase and uppercase letters.";
            return false;
        }
        if (password !== verify) {
            errors.verifyError = "Passwords must match.";
            return false;
        }
        if (email && !validator.isEmail(email)) {
            errors.emailError = "Invalid email address.";
            return false;
        }

        return true;
    };

    // ✅ Modified: Signup logic to hash password with bcrypt
    this.handleSignup = (req, res, next) => {
        const {
            email,
            userName,
            firstName,
            lastName,
            password,
            verify
        } = req.body;

        const errors = {
            "userName": userName,
            "email": email
        };

        if (validateSignup(userName, firstName, lastName, password, verify, email, errors)) {
            userDAO.getUserByUserName(userName, (err, user) => {
                if (err) return next(err);
                if (user) {
                    errors.userNameError = "User name already in use. Please choose another.";
                    return res.render("signup", {
                        ...errors,
                        environmentalScripts
                    });
                }

                // ✅ Hash the password before saving
                bcrypt.hash(password, 10, (err, hashedPassword) => {
                    if (err) return next(err);

                    userDAO.addUser(userName, firstName, lastName, hashedPassword, email, (err, user) => {
                        if (err) return next(err);

                        prepareUserData(user, next);

                        req.session.regenerate(() => {
                            req.session.userId = user._id;
                            user.userId = user._id;

                            return res.render("dashboard", {
                                ...user,
                                environmentalScripts
                            });
                        });
                    });
                });
            });
        } else {
            console.log("user did not validate");
            return res.render("signup", {
                ...errors,
                environmentalScripts
            });
        }
    };

    this.displayWelcomePage = (req, res, next) => {
        if (!req.session.userId) {
            console.log("welcome: Unable to identify user...redirecting to login");
            return res.redirect("/login");
        }

        const userId = req.session.userId;

        userDAO.getUserById(userId, (err, doc) => {
            if (err) return next(err);
            doc.userId = userId;
            return res.render("dashboard", {
                ...doc,
                environmentalScripts
            });
        });
    };
}

module.exports = SessionHandler;
